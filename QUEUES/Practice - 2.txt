import java.util.*;

public class Main {
  
  static class Node{
    int data;
    Node left;
    Node right;
    
    public Node(int data){
      this.data = data;
      this.left = null;
      this.right = null;
    }
  }
  
  static class BinaryTree{
    static int idx = -1;
    public static Node buildTree(int nodes[]){
      idx++;
      if(idx >= nodes.length || nodes[idx] == -1){
        return null;
      }
      Node newNode = new Node(nodes[idx]);
      newNode.left = buildTree(nodes);
      newNode.right = buildTree(nodes);
      
      return newNode;
    }
    
      public static void preorder(Node root) {
      if (root == null) {
        return;
      }
      System.out.print(root.data + " ");
      preorder(root.left);
      preorder(root.right);
    }
    
      public static void inorder(Node root){
        if(root == null){
          return;
        }
        inorder(root.left);
        System.out.print(root.data + " ");
        inorder(root.right);
      }
      
      public static void postorder(Node root){
        if(root == null){
          return;
        }
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data + " ");
      }
      
      public static void levelorder(Node root){
        if(root == null){
          return;
        }
        
        Queue<Node> q = new LinkedList<>();
        
        q.add(root);
        q.add(null);
        
        while(!q.isEmpty()){
          Node curr = q.remove();
          if(curr == null){
            System.out.println();
          if(q.isEmpty()){
            break;
          }
          else{
            q.add(null);
          }
        }
          else{
            System.out.print(curr.data + " ");
            if(curr.left != null){
              q.add(curr.left);
            }
            if(curr.right != null){
              q.add(curr.right);
            }
          }
        }
      }
      
      public static int height(Node root){
        if(root == null){
          return -1;
        }
        int lh = height(root.left);
        int rh = height(root.right);
        return Math.max(lh, rh) + 1;
      }
      
      public static int sum(Node root){
        if(root == null){
          return -1;
        }
        int ls = sum(root.left);
        int rs = sum(root.right);
        return ls + rs + root.data;
      }
      
      public static int count(Node root){
        if(root == null){
          return 0;
        }
        int lc = count(root.left);
        int rc = count(root.right);
        int result = lc + rc + 1;
        return result;
      }
  
      public static void KLevel(Node root, int level, int K){
        if(root == null){
          return;
        }
        
        if(level == K){
          System.out.print(root.data + " ");
          return;
        }
        
        KLevel(root.left, level + 1, K);
        KLevel(root.right, level + 1, K);
      }
}
    public static void main(String[] args) {
      int nodes[] = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
      BinaryTree tree = new BinaryTree();
      Node root = tree.buildTree(nodes);
      System.out.println(root.data);
      tree.preorder(root);
      System.out.println();
      tree.inorder(root);
      System.out.println();
      tree.postorder(root);
      System.out.println();
      tree.levelorder(root);
      System.out.println("Height of the binary tree = " + tree.height(root));
      System.out.println("Sum of the nodes of binary tree = " + tree.sum(root));
      System.out.println("Count of the nodes of binary tree = " + tree.count(root));
      tree.KLevel(root, 1, 3);
      
  }
}