// Import the necessary package
import java.util.*;

public class Main{
  // Define a static nested class Node
  static class Node{
    int data; // Data stored in the node
    Node next; // Reference to the next node
    
    // Constructor to initialize the node
    public Node(int data){
      this.data = data;
      this.next = null;
    }
  }
  
  // Define a static nested class Queue
  static class Queue{
    static Node head = null; // Head of the queue
    static Node tail = null; // Tail of the queue
    
    // Check if the queue is empty
    public static boolean isEmpty(){
      return head == null && tail == null;
    }
    
    // Add an element to the queue
    public static void add(int data){
	// If there is no element in linked list
      Node newNode = new Node(data);
      if(head == null){
        head = tail = newNode;
        return;
      }

	// Adding at the end of the linked list
      tail.next = newNode;
      tail = newNode;
    }
    
    // Remove an element from the queue
    public static int remove(){
      if(isEmpty()){
        System.out.println("Queue is empty");
        return -1;
      }
      int front = head.data;
	// If list had only 1 element in it
      if(tail == head){
        head = tail = null; 
      } else {
        head = head.next;// Removing 1st element
      }
      return front;
    }
    
    // Peek at the front element of the queue
    public static int peek(){
      if(isEmpty()){
        System.out.println("Queue is empty");
        return -1;
      }
      return head.data;
    }
  }
  
  // Main method to test the queue operations
  public static void main(String[] args){
    Queue q = new Queue(); // Create a queue
    q.add(1); // Add elements to the queue
    q.add(2);
    q.add(3);
    
    // Print and remove all elements from the queue
    while(!q.isEmpty()){
      System.out.println(q.peek()); // Print the front element
      q.remove(); // Remove the front element
    }
  }
}
