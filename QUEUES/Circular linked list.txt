import java.util.*;

public class Main{
  // Define a static nested class Queue
  static class Queue{
    static int arr[]; // Array to store queue elements
    static int size; // Maximum size of the queue
    static int rear; // Points to the last element in the queue
    static int front; // Points to the first element in the queue
    
    // Constructor to initialize the queue
    public Queue(int n){
      arr = new int[n];
      size = n;
      rear = -1;
      front = -1;
    }
  
    // Check if the queue is empty
    public static boolean isEmpty(){
      return rear == -1 && front == -1;
    }
  
    // Check if the queue is full
    public static boolean isFull(){
      return (rear + 1) % size == front;
    }
    
    // Add an element to the queue
    public static void add(int data){
      if(isFull()){
        System.out.println("Queue is full");
        return;
      }
      if(front == -1){
        front = 0;
      }
      rear = (rear + 1) % size;
      arr[rear] = data;
    }
  
    // Remove an element from the queue
    public static int remove(){
      if(isEmpty()){
        System.out.println("Queue is empty");
        return -1;
      }
      
      int result = arr[front]; 
      if(rear == front){ 
        rear = front = -1;
      }
      else{
        front = (front + 1) % size;
      }
      return result;
    }
  
    // Peek at the front element of the queue
    public static int peek(){
      if(isEmpty()){
        System.out.println("Queue is empty");
        return -1;
      }
      return arr[front];
    }
  }
  
  // Main method to test the queue operations
  public static void main(String[] args){
    Queue q = new Queue(5); // Create a queue of size 5
    q.add(1); // Add elements to the queue
    q.add(2);
    q.add(3);
    
    System.out.println(q.remove()); // Remove and print the front element
    q.add(4); // Add another element to the queue
    System.out.println(q.remove()); // Remove and print the front element
    q.add(5); // Add another element to the queue
    
    // Print and remove all elements from the queue
    while(!q.isEmpty()){
      System.out.println(q.peek()); // Print the front element
      q.remove(); // Remove the front element
    }
  }
}

