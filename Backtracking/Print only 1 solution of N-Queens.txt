//TC - O(n!)

import java.util.*;

public class Main {
  
    // Check if it's safe to place a queen at board[row][col]
    public static boolean isSafe(char board[][], int row, int col){
      // Check vertically upwards
      for(int i = row-1; i>=0; i--){
        if(board[i][col] == 'Q'){
          return false;
        }
      }
      
      // Check diagonally left upwards
      for(int i=row-1, j= col-1; i>=0 && j>=0; i--,j--){
        if(board[i][j] == 'Q'){
          return false;
        }
      }
      
      // Check diagonally right upwards
      for(int i=row-1, j=col+1; i>=0 && j<board.length; i--,j++){
        if(board[i][j] == 'Q'){
          return false;
        }
      }
      
      // It's safe to place the queen
      return true;
    }

    // Print the chess board
    public static void printBoard(char board[][]){
      //System.out.println("-------------chess board----------------");
      for(int i=0; i<board.length; i++){
        for(int j=0; j<board.length; j++){
          System.out.print(board[i][j] + " ");
        }
        System.out.println();
      }
    }

    // Solve the N-Queens problem
    public static boolean nQueens(char board[][], int row){
      // Base case: If all queens are placed
      if(row == board.length){
        //printBoard(board);
        return true;
      }
      
      // Try placing a queen in all columns one by one
      for(int j=0; j<board.length; j++){
        // Check if it's safe to place the queen
        if(isSafe(board, row, j)){
          board[row][j] = 'Q'; // Place the queen
          if(nQueens(board, row + 1)){
            return true;
          }
          //nQueens(board, row + 1); // Recur to place the rest
          board[row][j] = '.'; // Backtrack and remove the queen
        }
      }
      return false;
    }

    public static void main(String[] args) {
      int n = 4; // Size of the chess board
      char board[][] = new char[n][n];
      
      // Initialize the board with empty spaces
      for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
          board[i][j] = '.';
        }
      }
      
      // Start solving the N-Queens problem
      if (nQueens(board, 0)){
        System.out.println("Board exist");
        printBoard(board);
      }
      else{
        System.out.println("Board doesnot exist");
      }
  }
}
